

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."taskStatus" AS ENUM (
    'todo',
    'doing',
    'done',
    'rejected'
);


ALTER TYPE "public"."taskStatus" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."create_profile"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN 
INSERT INTO public.user_settings ("user") 
VALUES 
  (
    NEW.id
  );
INSERT INTO public.user_profiles ("user", slug) 
VALUES 
  (
    NEW.id,
    NEW.raw_user_meta_data ->> 'user_name'
  );
RETURN NEW;
END;$$;


ALTER FUNCTION "public"."create_profile"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."get_max_task_id"("input_project_id" "text") RETURNS integer
    LANGUAGE "plpgsql"
    AS $$
DECLARE
    max_id INTEGER;
BEGIN
    SELECT MAX(id) INTO max_id
    FROM tasks
    WHERE "projectId" = input_project_id;

    RETURN max_id;
END;
$$;


ALTER FUNCTION "public"."get_max_task_id"("input_project_id" "text") OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_max_id_column_on_insert"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
    -- Set the max_id_column to the maximum id where the projectId matches
    NEW."taskId" := COALESCE((
        SELECT MAX(tasks."taskId")
        FROM tasks
        WHERE "projectId" = NEW."projectId"
    ), 0) + 1;
    RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_max_id_column_on_insert"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."projects" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "ownerLogin" "text" NOT NULL,
    "ownerType" "text" NOT NULL,
    "visibility" "text" NOT NULL,
    "stars" numeric NOT NULL,
    "openIssues" numeric NOT NULL,
    "isFavourite" boolean DEFAULT false NOT NULL,
    "notes" "text",
    "showInPublicProfile" boolean
);


ALTER TABLE "public"."projects" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."tasks" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "isCompleted" boolean DEFAULT false NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "projectId" "uuid" NOT NULL,
    "issueNumber" bigint,
    "prNumber" bigint,
    "notes" "text",
    "status" "public"."taskStatus" DEFAULT 'todo'::"public"."taskStatus" NOT NULL,
    "taskId" bigint DEFAULT '0'::bigint,
    "deadline" timestamp with time zone
);


ALTER TABLE "public"."tasks" OWNER TO "postgres";


ALTER TABLE "public"."tasks" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tasks_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."user_profiles" (
    "bio" "text",
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid" NOT NULL,
    "slug" "text" NOT NULL,
    "fullName" "text"
);


ALTER TABLE "public"."user_profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_settings" (
    "createdAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "uuid" NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT "now"() NOT NULL,
    "showPublicActivity" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."user_settings" OWNER TO "postgres";


ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profile_pkey" PRIMARY KEY ("user");



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profile_slug_key" UNIQUE ("slug");



ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "user_settings_pkey" PRIMARY KEY ("user");



ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "user_settings_slug_key" UNIQUE ("updatedAt");



CREATE OR REPLACE TRIGGER "set_task_id" BEFORE INSERT ON "public"."tasks" FOR EACH ROW EXECUTE FUNCTION "public"."update_max_id_column_on_insert"();



ALTER TABLE ONLY "public"."projects"
    ADD CONSTRAINT "projects_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."tasks"
    ADD CONSTRAINT "tasks_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."projects"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_profiles"
    ADD CONSTRAINT "user_profile_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_settings"
    ADD CONSTRAINT "user_settings_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."user_profiles" FOR SELECT USING (true);



CREATE POLICY "Manage only own data" ON "public"."user_profiles" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user"));



CREATE POLICY "Manage only own data" ON "public"."user_settings" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user"));



CREATE POLICY "Mange only your projects" ON "public"."projects" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user"));



CREATE POLICY "Tasks must be in own project" ON "public"."tasks" TO "authenticated" USING ((EXISTS ( SELECT "projects"."id",
    "projects"."user"
   FROM "public"."projects"
  WHERE (("projects"."id" = "tasks"."projectId") AND ("projects"."user" = "auth"."uid"())))));



ALTER TABLE "public"."projects" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tasks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_settings" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."create_profile"() TO "anon";
GRANT ALL ON FUNCTION "public"."create_profile"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."create_profile"() TO "service_role";



GRANT ALL ON FUNCTION "public"."get_max_task_id"("input_project_id" "text") TO "anon";
GRANT ALL ON FUNCTION "public"."get_max_task_id"("input_project_id" "text") TO "authenticated";
GRANT ALL ON FUNCTION "public"."get_max_task_id"("input_project_id" "text") TO "service_role";



GRANT ALL ON FUNCTION "public"."update_max_id_column_on_insert"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_max_id_column_on_insert"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_max_id_column_on_insert"() TO "service_role";


















GRANT ALL ON TABLE "public"."projects" TO "anon";
GRANT ALL ON TABLE "public"."projects" TO "authenticated";
GRANT ALL ON TABLE "public"."projects" TO "service_role";



GRANT ALL ON TABLE "public"."tasks" TO "anon";
GRANT ALL ON TABLE "public"."tasks" TO "authenticated";
GRANT ALL ON TABLE "public"."tasks" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tasks_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tasks_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tasks_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."user_profiles" TO "anon";
GRANT ALL ON TABLE "public"."user_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_profiles" TO "service_role";



GRANT ALL ON TABLE "public"."user_settings" TO "anon";
GRANT ALL ON TABLE "public"."user_settings" TO "authenticated";
GRANT ALL ON TABLE "public"."user_settings" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
